



Network Working Group                                     S. Arciszewski
Internet-Draft                            Paragon Initiative Enterprises
Intended status: Informational                             April 5, 2018
Expires: October 7, 2018


               PASETO: Platform-Agnostic SEcurity TOkens
                   draft-paragonie-pasetorfc-draft00

Abstract

   Platform-Agnostic SEcurity TOkens (PASETO) provides a
   cryptographically secure, compact, and URL-safe representation of
   claims that may be transferred between two parties.  The claims in a
   PASETO are encoded as a JavaScript Object (JSON), version-tagged, and
   either encrypted or signed using public-key cryptography.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 7, 2018.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Arciszewski              Expires October 7, 2018                [Page 1]

Internet-Draft                                                April 2018


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Difference Between PASETO and JOSE  . . . . . . . . . . .   2
   2.  Notation and Conventions  . . . . . . . . . . . . . . . . . .   2
   3.  PASETO Message Format . . . . . . . . . . . . . . . . . . . .   3
   4.  PASETO Protocol Versions  . . . . . . . . . . . . . . . . . .   3
   5.  Additional Associated Data  . . . . . . . . . . . . . . . . .   3
   6.  Version v1  . . . . . . . . . . . . . . . . . . . . . . . . .   4
   7.  v1.local  . . . . . . . . . . . . . . . . . . . . . . . . . .   4
   8.  Version v2  . . . . . . . . . . . . . . . . . . . . . . . . .   4
   9.  v2.local  . . . . . . . . . . . . . . . . . . . . . . . . . .   4
   10. v2.public . . . . . . . . . . . . . . . . . . . . . . . . . .   5
   11. Normative References  . . . . . . . . . . . . . . . . . . . .   5
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .   6

1.  Introduction

   Platform-Agnostic SEcurity TOken (PASETO) is a cryptographically
   secure, compact, and URL-safe representation of claims intended for
   space-constrained environments such as HTTP Cookies, HTTP
   Authorization headers, and URI query parameters.  PASETOs encode
   claims to be transmitted in a JSON [RFC7159] object, and is either
   encrypted or signed using public-key cryptography.

1.1.  Difference Between PASETO and JOSE

   The key difference between PASETO and the JOSE family of standards
   (JWS [RFC7516], JWE [RFC7517], JWK [RFC7518], JWA [RFC7518], and JWT
   [RFC7519]) is that JOSE allows implementors and users to mix and
   match their own choice of cryptographig algorithms (specified by the
   "alg" header in JWT), while PASETO has clearly defined protocol
   versions to prevent users without a cryptography engineering
   background from selecting or permitting an insecure configuration.

   PASETO is defined in two pieces:

   1.  The PASETO Message Format, defined in Section 3

   2.  The PASETO Protocol Version, defined in Section 4

2.  Notation and Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119 [RFC2119].





Arciszewski              Expires October 7, 2018                [Page 2]

Internet-Draft                                                April 2018


   Additionally, the key words "*MIGHT*", "*COULD*", "*MAY WISH TO*",
   "*WOULD PROBABLY*", "*SHOULD CONSIDER*", and "*MUST (BUT WE KNOW YOU
   WON'T)*" in this document are to interpreted as described in RFC 6919
   [RFC6919].

3.  PASETO Message Format

   Without the Optional Footer:

                          version.purpose.payload

   With the Optional Footer:

                      version.purpose.payload.footer

   The *version* is a string that represents the current version of the
   protocol.  Currently, two versions are specified, which each possess
   their own ciphersuites.  Accepted values: *v1*, *v2*.

   The *purpose* is a short string describing the purpose of the token.
   Accepted values: *local*, *public*.

   o  *local*: shared-key authenticated encryption

   o  *public*: public-key digital signatures; *not encrypted*

   Any optional data can be appended to the *footer*. This data is
   authenticated through inclusion in the calculation of the
   authentication tag along with the header and payload.  The *footer*
   is NOT encrypted.

4.  PASETO Protocol Versions

   PASETO defines two protocol versions, *v1* and *v2*. Each protocol
   version strictly defines the cryptographic primitives used.  Changes
   to the primitives requires new protocol versions.

   Both *v1* and *v2* provide authentication of the entire PASETO
   message, including the *version*, *purpose*, *payload* and *footer*.

5.  Additional Associated Data

   PASETO uses *Additional Associated Data* to serialize each part of
   the message.  This provides a deterministic series of bytes for each
   message for use in authentication.  This is a string of bytes
   generated from an input array of byte strings.  The output is
   prefixed by a 64-bit unsigned little-endian integer of the number of
   items in the input array.  Each byte string in the input array is



Arciszewski              Expires October 7, 2018                [Page 3]

Internet-Draft                                                April 2018


   then added to the end of the existing output, each prefixed by a
   64-bit unsigned little-endian integer of the length of that string.

6.  Version v1

   Version *v1* is a compatibility mode comprised of cryptographic
   primitives likely available on legacy systems. *v1* SHOULD NOT be
   used when all systems are able to use *v2*. *v1* MAY be used when
   when compatibility requirements include systems unable to use
   cryptographic primitives from *v2*.

   *v1* messages MUST use a *purpose* value of either *local* or
   *public*.

7.  v1.local

   *v1.local* messages SHALL be encrypted and authenticated with AES-
   256-CTR and HMAC-SHA384 using "encrypted-then-MAC".

8.  Version v2

   Version *v2* is the RECOMMENDED protocol version. *v2* SHOULD be used
   in preference to *v1*. Applications using PASETO *SHOULD CONSIDER*
   only supporting *v1* messages.

   *v2* messages MUST use a *purpose* value of either *local* or
   *public*.

9.  v2.local

   *v2.local* messages MUST be encrypted with XChaCha20-Poly1305, a
   variant of ChaCha20-Poly1305 [RFC7539] defined in libsodium that uses
   a 192-bit nonce.

   The *key* SHALL be provided by the user.  The *key* MUST be 32 bytes
   long, and SHOULD be generated using a cryptographically secure
   source.  Implementors *SHOULD CONSIDER* providing functionality to
   generate this key for users when the implementation can ensure
   adequate entropy.  Any provided means for generating the *key* MUST
   NOT use poor sources of randomness.

   The *nonce* SHALL be constructed from a *BLAKE2b* [RFC7693] hash of
   the *payload*, with a 24 byte randomly generated key parameter and an
   output length of 24 bytes.  Implementations SHOULD use the libsodium
   "sodium_crypto_generichash" function when available.

   The v2.local ciphertext SHALL be constructed using XChaCha20-Poly1305
   of the *payload*, using the generated *nonce*, the generated



Arciszewski              Expires October 7, 2018                [Page 4]

Internet-Draft                                                April 2018


   *Additional Associated Data*, and using the 32 byte *key*.
   Implementations SHOULD use the libsodium
   "sodium_crypto_aead_xchacha20poly1305_ietf_encrypt" and
   "sodium_crypto_aead_xchacha20poly1305_ietf_decrypt" functions when
   available.

   The *v2.local output* is generated by prepending 'v2.local.' to the
   base64url-encoded *v2.local ciphertext* as per the *PASETO Message
   Format*

10.  v2.public

   *v2.public* messages MUST be signed using Ed25519 [RFC8032] public
   key signatures.  These messages provide authentication but do not
   prevent the contents from being read, including by those without
   either the *public key* or the *private key*.

   The *public key* and *private key* SHOULD be a valid pair of Ed25519
   keys.  Implementations *SHOULD CONSIDER* providing functions to
   generate the keypair and SHOULD use the "crypto_sign_keypair"
   libsodium function to do this when available.

   The *v2.public* *signature* is created by generating a byte string
   containing the *Additional Associated Data* of the public header
   (v2.public), the bytes of the *data*, and the *footer*. The
   *Additional Associated Data* is then signed with Ed25519 using the
   *private key*. Implementations SHOULD use the "crypto_sign_detached"
   libsodium function to generate this signature when available.

   The *signed payload* is generated by appending the *signature* to the
   input data bytes.  It is then base64url-encoded.

   The *v2.public output* is generated by prepending 'v2.public.' to the
   *signed payload* as per the *PASETO Message Format*.

11.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC6919]  Barnes, R., Kent, S., and E. Rescorla, "Further Key Words
              for Use in RFCs to Indicate Requirement Levels", RFC 6919,
              DOI 10.17487/RFC6919, April 2013,
              <https://www.rfc-editor.org/info/rfc6919>.





Arciszewski              Expires October 7, 2018                [Page 5]

Internet-Draft                                                April 2018


   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <https://www.rfc-editor.org/info/rfc7159>.

   [RFC7516]  Jones, M. and J. Hildebrand, "JSON Web Encryption (JWE)",
              RFC 7516, DOI 10.17487/RFC7516, May 2015,
              <https://www.rfc-editor.org/info/rfc7516>.

   [RFC7517]  Jones, M., "JSON Web Key (JWK)", RFC 7517,
              DOI 10.17487/RFC7517, May 2015,
              <https://www.rfc-editor.org/info/rfc7517>.

   [RFC7518]  Jones, M., "JSON Web Algorithms (JWA)", RFC 7518,
              DOI 10.17487/RFC7518, May 2015,
              <https://www.rfc-editor.org/info/rfc7518>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <https://www.rfc-editor.org/info/rfc7519>.

   [RFC7539]  Nir, Y. and A. Langley, "ChaCha20 and Poly1305 for IETF
              Protocols", RFC 7539, DOI 10.17487/RFC7539, May 2015,
              <https://www.rfc-editor.org/info/rfc7539>.

   [RFC7693]  Saarinen, M-J., Ed. and J-P. Aumasson, "The BLAKE2
              Cryptographic Hash and Message Authentication Code (MAC)",
              RFC 7693, DOI 10.17487/RFC7693, November 2015,
              <https://www.rfc-editor.org/info/rfc7693>.

   [RFC8032]  Josefsson, S. and I. Liusvaara, "Edwards-Curve Digital
              Signature Algorithm (EdDSA)", RFC 8032,
              DOI 10.17487/RFC8032, January 2017,
              <https://www.rfc-editor.org/info/rfc8032>.

Author's Address

   Scott Arciszewski
   Paragon Initiative Enterprises
   United States

   Email: security@paragonie.com










Arciszewski              Expires October 7, 2018                [Page 6]
